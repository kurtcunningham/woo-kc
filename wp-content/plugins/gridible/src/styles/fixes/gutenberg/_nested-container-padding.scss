/*
	These CSS rules were inpsired by robrobsn's proposed fix in this 2023 theme
	issue comment:
	https://github.com/WordPress/twentytwentythree/issues/240#issuecomment-1267101045

	I've modified them slightly. They now apply correct to alignfull elements, 
	including nested elements, without needing !important modifiers. 
	Additionally, they're a bit lighter weight and don't introduce redudnant 
	styles (that were already being generated by WP/Gutenberg).
*/

// This style rule is given the margin-left/right root padding by Gutenberg.
// We're just restoring padding here.
.has-global-padding > .alignfull {
	padding-right: var(--wp--style--root--padding-right);
	padding-left: var(--wp--style--root--padding-left);
}

.has-global-padding .has-global-padding.is-layout-constrained > .alignfull {
	margin-right: calc(var(--wp--style--root--padding-right) * -1);
	margin-left: calc(var(--wp--style--root--padding-left) * -1);
}

.has-global-padding > .alignfull:where(:not(.is-layout-constrained)) {
	padding-left: 0;
	padding-right: 0;
}

/*
	These are the original rules, with !important modifiers added to ensure
	they take precedence. They work, but we can be a little less heavy-handed.
*/
/*
// Rule 1
.has-global-padding > .alignfull {
	margin-right: calc(var(--wp--style--root--padding-right) * -1) !important;
	margin-left: calc(var(--wp--style--root--padding-left) * -1) !important;
	padding-right: var(--wp--style--root--padding-right) !important;
	padding-left: var(--wp--style--root--padding-left) !important;
}

// Rule 2
.has-global-padding > .alignfull:where(:not(.is-layout-constrained)) {
	padding-left: 0 !important;
	padding-right: 0 !important;
}

// Rule 3
.has-global-padding > .alignfull:where(:not(.has-global-padding)) > :where([class*="wp-block-"]:not(.alignfull):not([class*="__"]), p, h1, h2, h3, h4, h5, h6, ul, ol) {
	padding-left: 0 !important;
	padding-right: 0 !important;
}
*/
